#-------------------------------------------------
#
# RediNav
#
#-------------------------------------------------

#=====================================================================
# Notes about building on Windows.
#
# We are NOT using MSVC at all! Instead MinGW 32 bit (later maybe 64 bit) is used.
# The good news is it is part of the normal Qt Framework installation (Section "Tools").
# As of this writing we are using Qt 5.11.1. Things may change with next version.
#
#   1. Install OpenSsl 1.0.2p (but NOT 1.1.x !!) 32-bit version from: https://slproweb.com/products/Win32OpenSSL.html (https://slproweb.com/download/Win32OpenSSL-1_0_2p.exe).
#      NOTE: In order to run RediNav later, instruct OpenSsl installer to install some libraries in Windows system folder!
#   2. Install CMAKE system wide from https://cmake.org/download/ (https://cmake.org/files/v3.12/cmake-3.12.4-win64-x64.msi). Adjust PATH.
#   3. Install Qt Open Source, including MinGW 32bit tool
#   4. Set MinGW as the build kit for RediNav project in Qt Creator
#   5. Make sure OS level PATH environment variable contains <Qt-root>\Tools\mingw530_32\bin (check the MinGW version)
#   6. Pull all RediNav submodules, namely, qsshclient/3rdparty/libssh2
#   7. Building libssh2
#       cd <redinav-root>/build
#       mkdir libssh2
#       cd libssh2
#       cmake -G "MinGW Makefiles" ..\..\3rdparty\qsshclient\3rdparty\libssh2
#       cmake --build .
#   8. At this point you should have this static librray available: <redinav-root>/build/libssh2/src/libssh2.a
#   9. Build project in Qt
#   10. You may need MSVCR 1.20 (MSVS 2013). No need to install MS Visual C. Just install redistributables
#           x64: http://download.microsoft.com/download/0/5/6/056dcda9-d667-4e27-8001-8a0c6971d6b1/vcredist_x64.exe
#           x32: http://download.microsoft.com/download/0/5/6/056dcda9-d667-4e27-8001-8a0c6971d6b1/vcredist_x86.exe
#
#=====================================================================

DEFINES += APPLICATION_NAME=\\\"redinav\\\"
DEFINES += ORG_NAME=\\\"scavaline.com\\\"
DEFINES += ORG_DOMAIN=\\\"scavaline.com\\\"


#------------------------ ---------------------- --------------------- -------------

# Load version from this text file - the single point where we put the version!
REDINAV_VERSION = "$$cat($$PWD/version.txt)"

# Modify the header file (used across the project)
VERSION_H  += "/* ************************************************************ */"
VERSION_H  += "/* DO NOT EDIT THIS FILE! IT IS GENERATED BY QMAKE PROJECT FILE */"
VERSION_H  += "/*                 EDIT version.txt FILE INSTEAD                */"
VERSION_H  += "/*              Requires Build > Run qmake command              */"
VERSION_H  += "/* ************************************************************ */"
VERSION_H  += "$${LITERAL_HASH}pragma once"
VERSION_H  += "$${LITERAL_HASH}define REDINAV_VERSION \"$$REDINAV_VERSION\""
write_file("modules/version.h", VERSION_H)

message("BUILDING version $$REDINAV_VERSION")

QT += core gui network concurrent widgets quick quickwidgets charts

TEMPLATE = app

DEFINES += CORE_LIBRARY ELPP_QT_LOGGING ELPP_STL_LOGGING ELPP_DISABLE_DEFAULT_CRASH_HANDLING QT_DEPRECATED_WARNINGS

DEFINES += SUPPORT_EMAIL=\\\"support@redinav.com\\\"
DEFINES += SKIP_LIMITER
DEFINES += SKIP_LICENSE_CHECK
DEFINES += SSH_SUPPORT
DEFINES += OPENSSL_STATIC

# Production
if (CONFIG(production)) {
    DEFINES += REDINAV_URL=\\\"https://www.redinav.com\\\"
    DEFINES += ENV_MODE=\\\"production\\\"
}
# Staging
else {
    DEFINES += REDINAV_URL=\\\"https://staging.redinav.com\\\"
    DEFINES += ENV_MODE=\\\"staging\\\"
}


SOURCES += \
    $$PWD/main.cpp \
    $$PWD/modules/*.cpp \
    $$PWD/modules/connection/*.cpp \
    $$PWD/modules/keyeditor/*.cpp \
    $$PWD/modules/maintree/*.cpp \
    $$PWD/modules/license/*.cpp \
    $$PWD/modules/terminal/*.cpp \
    $$PWD/modules/transporters/*.cpp \

HEADERS  += \
    $$PWD/modules/*.h \
    $$PWD/modules/connection/*.h \
    $$PWD/modules/keyeditor/*.h \
    $$PWD/modules/maintree/*.h \
    $$PWD/modules/license/*.h \
    $$PWD/modules/terminal/*.h \
    $$PWD/modules/transporters/*.h \

INCLUDEPATH += $$PWD/modules/transporters/


THIRDPARTYDIR = $$PWD/../3rdparty/
include($$THIRDPARTYDIR/3rdparty.pri)

# License management related (Windows and Linux only)
if (exists($$PWD/../deploy/license/redinav_license.pri):CONFIG(license))  {
    include($$PWD/../deploy/license/redinav_license.pri)
    DEFINES -= SKIP_LIMITER
    DEFINES -= SKIP_LICENSE_CHECK
    message("Building with License management support")
}
else:!exists($$PWD/../deploy/license/redinav_license.pri):CONFIG(license)  {
    message("---------------------------------------------------------------------")
    message("License support requested but related custom definitions are missing")
    message("----------------- PLEASE FIX THIS BEFORE BUILD ---------------------")
    return()
}
else {
    DEFINES += LICENSE_STORE_CODE=\\\"dummy\\\"
    DEFINES += LICENSE_PRODUCT_SKU=\\\"dummy\\\"
    DEFINES += LICENSE_API_BASE_URL=\\\"https://ahoy.dummy.com/\\\"
    message("Building with NO license management support")
}




win32 {
    message("Building for win32")
    TARGET =RediNav
    CONFIG += c++11
    #RC_FILE += redinav.rc
    #RC_ICONS=redinav.ico
    RC_FILE += $$PWD/resources/redinav.rc

    # MSVC
    win32-msvc* {
        QMAKE_LFLAGS += /LARGEADDRESSAWARE
    }

    # MinGW
    win32-g++ {
        message("Building with MinGW")
        LIBSSH_LIB_PATH = $$PWD/../build/libssh2/src
        OPENSSL_LIB_PATH = C:/OpenSSL-Win32/lib/MinGW

        # OpenSSL must be installed (see instructions at the top of this file)
        PRE_TARGETDEPS += $$OPENSSL_LIB_PATH/libeay32.a

        # libssh2 must be built separately (see instructions above again)
        PRE_TARGETDEPS += $$LIBSSH_LIB_PATH/libssh2.a

        # Added by 3rdparty/qsshclient/3rdparty/3rdparty.pri (because it is not MinGW-aware and if compiler is not MSVC it falls back to linux env. - wrong)
        LIBS -= -lz -lssl -lcrypto -lssh2
        LIBS += -L$$LIBSSH_LIB_PATH -L$$OPENSSL_LIB_PATH -llibssh2 -llibeay32 -lgdi32 -lws2_32 -lkernel32 -luser32 -lshell32 -luuid -lole32 -ladvapi32
    }

    release: {
        message("Building for RELEASE")
        DESTDIR = $$PWD\..\bin\windows\release
    }
    debug:   {
        DESTDIR = $$PWD\..\bin\windows\debug
        DEFINES -= QT_NO_DEBUG_OUTPUT
    }

}

unix:macx { # OSX
    TARGET = RediNav
    QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.13
    QT += svg
    CONFIG += c++11
    CONFIG -= static

    release: { bundleclean.commands = rm -fR ../bin/osx/release/$${TARGET}.app }
    debug: { bundleclean.commands = rm -fR ../bin/osx/debug/$${TARGET}.app }

    QMAKE_EXTRA_TARGETS += bundleclean

    exists( /opt/local/bin/port ) {
        INCLUDEPATH += /opt/local/include
        INCLUDEPATH += /opt/local/include/openssl
        LIBS -= -L/usr/local/opt/openssl/lib # added by qsshclient, assuming homebrew, we are using MacPorts in this case
        LIBS += -L/opt/local/lib
        LIBS -= /usr/local/lib/libssh2.a
        LIBS += /opt/local/lib/libssh2.a
        #LIBS += -lz -lssl -lcrypto
    }

    release: {
        DESTDIR = $$PWD/../bin/osx/release
        DEFINES+=QT_NO_DEBUG_OUTPUT
    }
    debug:   {
        DESTDIR = $$PWD/../bin/osx/debug
        DEFINES-=QT_NO_DEBUG_OUTPUT
    }

    # Get this pre-built Info.plist
    QMAKE_INFO_PLIST =  $$PWD/../deploy/mac/Info.plist
    # Copy this icon to Resourses folder in App bundle
    ICON = $$PWD/../deploy/mac/AppIcon.icns

}

unix:!macx { # ubuntu & debian
    TARGET = redinav

    QTPLUGIN += qsvg qsvgicon
    QMAKE_CXXFLAGS += -Wno-sign-compare

    debug: {
        # For better debugging, lower down the optimization
        QMAKE_CXXFLAGS_DEBUG -=-O1 -O2 -O3 -Os
        QMAKE_CXXFLAGS_DEBUG +=-O0
    }
    release: {
        DEFINES+=QT_NO_DEBUG_OUTPUT
    }


    PRE_TARGETDEPS += $$PWD/../3rdparty/openssl/build/lib/libcrypto.a
    PRE_TARGETDEPS += $$PWD/../3rdparty/openssl/build/lib/libssl.a
    PRE_TARGETDEPS += $$PWD/../3rdparty/libssh2/build/usr/local/lib/libssh2.a


    # OpenSSL 1.1.x (static). Built from source (see common_functions::build_openssl). Required by libssh2
    # libssh2 (static). Built from source (see common_functions::build_libssh2). Required by qsshclient
    # NOTE: qredisclient/qsshclient/libssh2 is NOT built nor used at all!
    INCLUDEPATH += $$PWD/../3rdparty/openssl/build/include/openssl
    INCLUDEPATH += $$PWD/../3rdparty/libssh2/build/usr/local/include

    # ORDER IS IMPORTANT!!!
    LIBS += -L$$PWD/../3rdparty/openssl/build/lib -L$$PWD/../3rdparty/libssh2/build/usr/local/lib -lssh2 -lz -lssl -lcrypto -ldl

    release: {
        DESTDIR = $$PWD/../bin/linux/release
        DEFINES+=QT_NO_DEBUG_OUTPUT
    }
    debug:   {
        DESTDIR = $$PWD/../bin/linux/debug
        DEFINES-=QT_NO_DEBUG_OUTPUT
    }

    # Deployment
    target.path = /usr/share/redinav/bin
    target.files = $$DESTDIR/$$TARGET $$PWD/resources/qt.conf  $$PWD/resources/redinav.png $$PWD/resources/redinav.sh
    INSTALLS += target

    data.path = /usr/share/redinav/lib
    data.files = $$PWD/lib/*
    INSTALLS += data

    deskicon.path = /usr/share/applications
    deskicon.files =  $$PWD/resources/redinav.desktop
    INSTALLS += deskicon
}

OBJECTS_DIR = $$DESTDIR/obj
MOC_DIR = $$DESTDIR/obj
RCC_DIR = $$DESTDIR/obj

INCLUDEPATH += $$PWD/ \
    $$PWD/modules/ \

RESOURCES += \
    $$PWD/qml.qrc \


OTHER_FILES += \
    $$PWD/../LICENSE \
    $$PWD/../build/common_functions \
    $$PWD/../deploy/mac/* \
    $$PWD/../deploy/linux/* \
    $$PWD/../deploy/linux/docker/* \
    $$PWD/../deploy/license/* \
    $$PWD/../deploy/*.* \
    $$PWD/../deploy/CHANGELOG.md \
    $$PWD/*.sh \
    $$PWD/*.bat \
    $$PWD/configure \
    $$PWD/../*.sh \
    $$PWD/../deploy/windows/* \
    $$PWD/*.txt \



CODECFORSRC = UTF-8
